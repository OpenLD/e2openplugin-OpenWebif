#filter WebSafe
#from Plugins.Extensions.OpenWebif.local import tstrings
<style>
#streamchannels-menu {
	max-height: 300px;
}
</style>
<div id="content_main" style="min-height: 550px;background-image:none;" class="ui-widget-content">
	<div id="info">
	<div style="display: inline-block; width: 100%; zoom: 1;background-image:none;" class="ui-widget-content">
		<h3 class="ui-widget-header">Player</h3>
				<div id="errPlayer" style="margin:0 auto 0 auto;width:640px;height:400px;">
					<div>
						The currect selected player and source will not work.
						
						VLC Player will not work in Chrome.
						VXG Player will only work in Chrome.
						
						Openwebif via HTTPS and Live Stream will not work.
						
						....
						
					</div>
				</div>
				<div id="vlcPlayer" style="margin:0 auto 0 auto;width:640px;height:400px;">
					<embed type="application/x-vlc-plugin" pluginspage="http://www.videolan.org" version="VideoLAN.VLCPlugin.2" width="640px" height="360px" id="vlc"></embed>
				</div>
				<div id="htmlPlayer" style="margin:0 auto 0 auto;width:640px;height:400px;">
				<video id="htmlp" width="640" height="360" controls>
				</video>
				</div>
				#if $vxgenabled
				<div id="vxgPlayer" style="margin:0 auto 0 auto;width:640px;height:500px;">
				</div>
				#end if
				<div style="display:table;margin:10 auto 10 auto;">
					<span id="plbuttons" style="margin-right:10px;">
					<input type="hidden" id="sid" value="$sid" />
					<input type="radio" id="plbtn_vlc" name="rplbutton" /><label id="lplbtn_vlc" for="plbtn_vlc">VLC</label>
					<input type="radio" id="plbtn_vxg" name="rplbutton" /><label id="lplbtn_vxg" for="plbtn_vxg">VXG</label>
					<input type="radio" id="plbtn_html" name="rplbutton" /><label id="lplbtn_html" for="plbtn_html">HTML</label>
					</span>
					<div style="display:inline-block;margin-left:10px;">
						<span id="Deinterlace">
							Deinterlace: <select id="deinterlace">
								<option value="off">Off</option>
								<option value="blend">Blend</option>
								<option value="bob">Bob</option>
								<option value="discard">Discard</option>
								<option value="linear">Linear</option>
								<option value="mean">Mean</option>
								<option value="x">X</option>
								<option value="yadif">Yadif</option>
								<option value="yadif2x">Yadif2x</option>
							</select>
						</span>
						<div style="display:inline-block;margin-left:10px;">
							<label for="wautoplay">Autoplay</label>
							<input type="checkbox" name="wautoplay" id="wautoplay">
							<label id="wtranscodingl" for="wtranscoding">Transcoding</label>
							<input type="checkbox" data-port="$transcoder_port" name="wtranscoding" id="wtranscoding">
							<button id="btnstop" style="margin-left:5px;">Stop</button>
							<button id="btnplay" style="margin-left:5px;">Play</button>
						</div>
					</div>
				</div>
				<div style="display:table;margin-top:10px;margin-bottom:10px;width: 95%;">
					<div style="display:table;margin:10 auto 10 auto;">
					<span id="srcbuttons" style="margin-right:10px;">
					<input type="radio" id="sbtn0" name="srcbutton" checked="checked" /><label for="sbtn0">$tstrings['channels']</label>
					<input type="radio" id="sbtn1" name="srcbutton" /><label for="sbtn1">$tstrings['movies']</label>
					</span>
					<span style="display:inline-block;">
					<select name="streamchannels" id="streamchannels" tabindex="16"></select>
					<select name="streamrecordings" id="streamrecordings" tabindex="10"></select>
					<select id="moviesort">
					#set $count = 0
					#set $da = $tstrings['date']
					#set $na = $tstrings['name']
					#set $sortnames = [$na,$na,$da,$da]
					#set $sorttypes = ['name','named','date','dated']
					#set $sortimg = ['fa-sort-alpha-asc','fa-sort-alpha-desc','fa-sort-numeric-asc','fa-sort-numeric-desc']
					#for $title in $sortnames
						<option value="$sorttypes[$count]" data-class="$sortimg[$count]">$title</option>
						#set $count += 1
					#end for
					</select>
					</span>
					</div>
				</div>
				
			</div>
		</div>
<script type="text/javascript" src="/js/chosen.jquery.min.js"></script>
#if $vxgenabled
<script type="text/javascript" src="/js/vxgplayer-1.8.15.min.js"></script>
#end if
<script>
var isChrome = !!window.chrome;

(function() {

	var PlayerObj = function () {
		var self;
		var _vlc;
		var _html;
		var vxgplayerId = null;
		var currentp;
		var folderoptions;
		var dn;
		var url;
		var pr;
		var pl;
		var hasvlc=false;
		var hasvxg=false;
		return {
			setup: function () {
				self = this;
				self.pl = GetLSValue('webtvplayerl','vlc');
				self.pr = GetLSValue('webtvplayerr','vlc');
				if (isChrome) {
					\$('#plbtn_vlc').remove();
					\$('#lplbtn_vlc').remove();
				} else
					self.hasvlc=true;
#if $vxgenabled
				self.hasvxg = true;
#end if
				if (isChrome && self.hasvxg)
				{
					self.pl = GetLSValue('webtvplayerl','vxg');
					self.pr = GetLSValue('webtvplayerr','vxg');
				}
				else
				{
					\$('#plbtn_vxg').remove();
					\$('#lplbtn_vxg').remove();
				}

				SetLSValue('webtvplayerl',self.pl);
				SetLSValue('webtvplayerr',self.pr);

				\$('#sbtn0').click(function(){
					\$('#streamchannels_chosen').css('display','inline-block');
					\$('#streamrecordings_chosen').css('display','none');
					\$('#moviesort-button').hide();
					self.currentp = self.pl;
					self.setPlayer(self.pl);
					self.CheckPlayer();
				});
				\$('#sbtn1').click(function(){
					\$('#streamrecordings_chosen').css('display','inline-block');
					\$('#streamchannels_chosen').css('display','none');
					\$('#moviesort-button').show();
					self.currentp = self.pr;
					self.setPlayer(self.pr);
					self.CheckPlayer();
				});
				
				\$("#srcbuttons").buttonset();

				\$("#streamchannels").chosen({disable_search_threshold: 10,no_results_text: "Oops, nothing found!",width: "400px"});
				\$("#streamchannels").chosen().change( 
					function() {
						self.setUrl(\$("#streamchannels").val(),\$("#streamchannels option:selected").text(),true);
						self.play();
					}
				);
				
				\$("#streamrecordings").chosen({disable_search_threshold: 10,no_results_text: "Oops, nothing found!",width: "400px"});
				\$("#streamrecordings").chosen().change( 
					function() {
						var ref = \$("#streamrecordings").val();
						var name = \$("#streamrecordings option:selected").text();
						if(ref!='')
						{
							if(ref == name)
							{
								\$("#streamrecordings").empty();
								\$('#streamrecordings').trigger("chosen:updated");
								\$("#moviesort-button .ui-selectmenu-text .sortimg").empty();
								self.getRecordings(ref,function(){
									\$('#streamrecordings').trigger("chosen:updated");
								});
							}
							else {
								self.setUrl(ref,name,false);
								self.play();
							}
						}
					}
				);
				
				\$("#deinterlace").chosen({disable_search: true,no_results_text: "",width: "150px"});
				\$("#deinterlace").chosen().change( 
						function() {
							var dv = \$("#deinterlace").val();
							SetLSValue('vlcdeinterlace',dv);
							self.setDeinterlace(dv);
						}
				);
				
				var dv = GetLSValue('vlcdeinterlace','off');
				\$("#deinterlace").val( dv );
				\$('#deinterlace').trigger("chosen:updated");
				self.setDeinterlace(dv);
				
				GetAllServices(function ( options , boptions) {
					\$("#streamchannels").append( options);
					if(current_ref) {
						\$("#streamchannels").val( current_ref );
					}
					\$('#streamchannels').trigger("chosen:updated");
				});
				
				self.getRecordings('',function(){
					\$('#streamrecordings').trigger("chosen:updated");
				});
				
				\$(".chosen-container .chosen-drop").addClass('ui-widget-content');
				if (theme == 'eggplant' || theme == 'vader')
				{
					\$(".chosen-container .chosen-drop").css('background-image','none');
				}
				
				\$('#btnstop').click(function(){
					self.stop();
					\$(this).blur();
				});
				\$('#btnplay').click(function(){
					self.play();
					\$(this).blur();
				});
				
				\$('#streamchannels_chosen').css('display','inline-block');
				\$('#streamrecordings_chosen').css('display','none');

				if(\$('#wtranscoding').data('port')!='0')
				{
					\$('#wtranscoding').click(function() { 
						SetLSValue('wtranscoding',\$('#wtranscoding').is(':checked'));
						\$(this).blur();
					});
					var ap = GetLSValue('wtranscoding',false);
					\$('#wtranscoding').prop('checked',ap);
				}
				else
				{
					\$('#wtranscoding').hide();
					\$('#wtranscodingl').hide();
				}

				\$.widget( "custom.iconselectmenu", \$.ui.selectmenu, {
					_renderItem: function( ul, item ) {
						var li = \$( "<li>" ),
						wrapper = \$( "<div>",{ text: item.label } ).prepend (
						\$( "<span class='sortimg'>").append (
							\$( "<i>", { "class": "fa " + item.element.data("class") })
							)
						);
						return li.append( wrapper ).appendTo( ul );
					}
				});	
				
				var ms = GetLSValue('webtvms','name');
				\$('#moviesort').val(ms).change();

				\$('#moviesort').iconselectmenu({change: function(event, ui) {
					\$("#streamrecordings").empty();
					SetLSValue('webtvms',ui.item.value);
					self.SortMovies();
					}
				}).addClass('ui-menu-icons');

				\$('#moviesort-button').hide();
				\$('#moviesort-button').css('margin-left','10px');
				
				\$('#wautoplay').checkboxradio();
				\$('#wtranscoding').checkboxradio();
				
				\$('#btnstop').button();
				\$('#btnplay').button();
				
				\$("#plbuttons").buttonset();
				
				\$('#plbtn_vlc').click(function(){
					self.setRecPlayer('vlc');
				});
				\$('#plbtn_vxg').click(function(){
					self.setRecPlayer('vxg');
				});
				\$('#plbtn_html').click(function(){
					self.setRecPlayer('html');
				});
				
				self.setPlayer(self.pl);
				self.CheckPlayer();
				
				\$('#wautoplay').click(function() { 
					SetLSValue('wautoplay',\$('#wautoplay').is(':checked'));
					\$(this).blur();
				});
				var ap = GetLSValue('wautoplay',false);
				\$('#wautoplay').prop('checked',ap);

				if(current_ref) {
					self.setUrl(current_ref,current_name,true);
					if (ap)
						self.play();
				}
			},setRecPlayer: function (pl) {
				self.currentp = self.pr = pl;
				SetLSValue('webtvplayerr',self.currentp);
				self.setPlayer(self.currentp);
			},SortMovies: function () {

				var idx = GetLSValue('webtvms','name');
				var _mv = MLHelper.SortMovies(idx).slice();

				var options = self.folderoptions;
				var items = [];
				// TODO : format list
				for (var i = 0, len = _mv.length; i < len; i++) {
					items.push (
						"<option value='" + _mv[i].fn + "'>" + _mv[i].title + "&nbsp;/&nbsp;" + _mv[i].bt + "</option>"
					);
				}
				options += "<optgroup label='" + self.dn + "'>" + items.join("") + "</optgroup>";
				\$("#streamrecordings").append( options );
				\$('#streamrecordings').trigger("chosen:updated");

			},CheckPlayer: function () {
			
				var live = (\$('#moviesort-button').css('display') == 'none')
				var pl = self.currentp;
				
				\$('#errPlayer').hide();
				if(pl == 'html')
					\$('#htmlPlayer').show();
				else {
					\$('#htmlPlayer').hide();
				}
				
				if(pl == 'vxg')
					\$('#vxgPlayer').show();
				else
					\$('#vxgPlayer').hide();

				if(pl == 'vlc')
					\$('#vlcPlayer').show();
				else
					\$('#vlcPlayer').hide();
				
				if (live && window.location.protocol == 'https') {
					\$('#vlcPlayer').hide();
					\$('#vxgPlayer').hide();
					\$('#errPlayer').show();
				}
				if (live) {
					\$('#plbuttons').hide();
				} else {
					\$('#plbtn_html').prop('checked',false).button("refresh");
					if(self.hasvxg)
						\$('#plbtn_vxg').prop('checked',false).button("refresh");
					if(self.hasvlc)
						\$('#plbtn_vlc').prop('checked',false).button("refresh");
					\$('#plbtn_'+pl).prop('checked',true).button("refresh");
					\$('#plbuttons').show();
				}

			},getRecordings: function(_dirname,callback) {
				var rdata = {fields:'f'};
				if(_dirname != '')
					rdata = {dirname: _dirname,fields:'f'};
				\$.ajax({
					url: '/api/movielist',
					dataType: 'json',
					cache: false,
					data: rdata,
					success: function ( data ) {
						var mv = data['movies'];
						self.dn = data['directory'];
						var subdirs = data['bookmarks'];
						var items = [];
						var lastdir = '';
						var dira = self.dn.split('/');
						var options='';
						if(dira.length>1) {
							for (index = 0;index < dira.length - 2; ++index) {
								lastdir += dira[index] + '/';
							}
						}
						if(lastdir!='') {
							options = "<optgroup label='Folders'>";
							options += "<option value='' disabled selected style='display:none;'></option>";
							options += "<option value='" + lastdir + "'>" + lastdir + "</option>";
							for (index = 0;index < subdirs.length - 1; ++index) {
								options += "<option value='" + self.dn + subdirs[index] + "'>" + self.dn + subdirs[index] + "</option>";
							}
							options += "</optgroup>";
						}
						
						self.folderoptions = options;
						
						var _mv = [];
						
						$.each( mv, function( key, val ) {
							var _fn = val['filename'].replace(/'/g, '___');
							_mv.push({ title :  val['eventname'], bt : val['begintime'], start:val['recordingtime'],fn:_fn});
						});
						
						MLHelper.SetMovies(_mv);
						self.SortMovies();
						callback();
					}
				});
			}, setDeinterlace: function(val){
					var modes = ["blend", "bob", "discard", "linear", "mean", "x", "yadif", "yadif2x"];
					try {
						if(val != "off" && modes.indexOf(val) >= 0)
							self._vlc.video.deinterlace.enable(val);
						else
							self._vlc.video.deinterlace.disable();
					} catch (e) { }
			}, setUrl: function(sref,name,live) {

				try {
					var sessionid = ''
					sid = document.getElementById('sid').value;

					if (!live) {
						var fn = sref.split('/').reverse()[0];
						var path = encodeURIComponent(sref.substring(0,sref.length-fn.length));
						fn = fn.replace(/___/g, "'");
						sref = path + escape(fn);
					}
					
					var tp = \$('#wtranscoding').data('port');
					var trans = GetLSValue('wtranscoding',false);
					if(tp!='0' && trans)
					{
						if(sid!='') sessionid = '?sessionid=' + sid;
						url = 'http://' + window.location.hostname + ':'+ tp +'/' + sref; // + sessionid;
					}
					else
					{
						if (live) {
							if(sid!='') sessionid = '&sessionid=' + sid;
							url = 'http://' + window.location.hostname + ':8001/' + sref + sessionid;
						} else {
							if(sid!='') sessionid = '&sessionid=' + sid;
							baseurl = window.location.protocol + '//' + window.location.hostname;
							if (window.location.port != "")
								baseurl = baseurl + ':' + window.location.port;
							url = baseurl + '/file?file=' + sref + sessionid;
						}
					}
					
					console.log(url);
					
					if(self._vlc) {
						self._vlc.playlist.clear();
						self._vlc.playlist.add(url);
					}
					if(self._html) {
						self._html.src = url;
					}
#if $vxgenabled
					if(self.currentp == 'vxg')
						vxgplayer(self.vxgplayerId).src(url);
#end if
				} catch (e) {
				}
			}, stop: function() {
#if $vxgenabled
				if(self.currentp == 'vxg')
					vxgplayer(self.vxgplayerId).stop();
#end if
				if(self.currentp == 'vlc')
					try { self._vlc.playlist.stop(); } catch (e) { }
				if(self.currentp == 'html')
					try { self._html.stop(); } catch (e) { }
			}, play: function() {
#if $vxgenabled
				if(self.currentp == 'vxg')
					vxgplayer(self.vxgplayerId).play();
#end if
				if(self.currentp == 'vlc')
					try { self._vlc.playlist.play(); } catch (e) { }
				if(self.currentp == 'html')
					try { self._html.play(); } catch (e) { }
			}, setPlayer : function (pl) {
				self._vlc = null;
				self._html = null;
				\$('#vlcPlayer').hide();
#if $vxgenabled
				\$('#vxgPlayer').hide();
#end if
				\$('#htmlPlayer').hide();
				self.currentp = pl;
				
				if(pl == 'vlc'){
					self._vlc = document.getElementById("vlc");
					\$('#Deinterlace').show();
					\$('#vlcPlayer').show();
				}
				else
					\$('#Deinterlace').hide();
				
				if(pl == 'html'){
					self._html = document.getElementById("htmlp");
					\$('#htmlPlayer').show();
				}
#if $vxgenabled
				if(pl == 'vxg'){
					if(!self.vxgplayerId)
						self.createVX();
					\$('#vxgPlayer').show();
				}
				
				self.CheckPlayer();
				
			}, createVX: function() {
			
				self.vxgplayerId = 'vxg_media_player1';
				var div = document.createElement('div');
				div.setAttribute("id", self.vxgplayerId);
				div.setAttribute("class", "vxgplayer");
				var _parent = document.getElementById('vxgPlayer');
				_parent.appendChild(div);
				vxgplayer(self.vxgplayerId, {
					nmf_path: 'media_player.nmf',
					nmf_src: '/js/media_player.nmf',
					latency: 300000,
					aspect_ratio_mode: 1,
					autohide: 3,
					controls: true,
					avsync: true,
					autoreconnect: 1
				});
#end if
			},
		}
	};

	var playerobj = new PlayerObj();
	playerobj.setup();

})();
</script>
<link rel="stylesheet" type="text/css" href="/css/chosen.min.css" />
#if $vxgenabled
<link rel="stylesheet" type="text/css" href="/css/vxgplayer-1.8.15.min.css" />
<style>
.vxgplayer-error { margin-left:0px;}
</style>
#end if
#end filter